// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios12.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SwipBoxSDK
import CoreBluetooth
import Foundation
import Swift
@_exported import SwipBoxSDK
import UIKit
import _Concurrency
@objc @_inheritsConvenienceInitializers public class BLELockerWrapper : ObjectiveC.NSObject {
  public static var shared: SwipBoxSDK.BLELockerWrapper
  public var bleLockerCallbackDelegate: SwipBoxSDK.BLELockerCallBackDelegate?
  public var compartment_id: Swift.Int
  @objc override dynamic public init()
  public func startScan()
  public func connect(bleLockerData: Swift.String)
  public func openCompartment()
  public func disconnect()
  public func getHardwareData() -> Swift.Dictionary<Swift.String, Any>
  public func clearHardwareJsonData()
  @objc deinit
}
public protocol BLELockerCallBackDelegate {
  func onCompartmentStatusChanged(uid: Swift.String, compartmentId: Swift.Int, state: Swift.Int)
  func onConnectionStatusChange(isConnected: Swift.Bool)
  func onError(isHardwareError: Swift.Bool, errorCode: Swift.Int)
  func onDataAvaliable(jsonData: Swift.Dictionary<Swift.String, Any>)
  func onFirmwareUpdateInProgress(percentage: Swift.Int)
  func onOpenCompartmentDetected(ids: [Swift.Int])
  func onStatusAvailable(uid: Swift.String, bytes: [Swift.UInt8])
}
@_hasMissingDesignatedInitializers public class LockerConstant {
  public func getErrorMessage(errorCode: Swift.Int) -> Swift.String
  @objc deinit
}
public enum LockerConstants {
  public enum General : Swift.Int {
    case STATUS_DEVICE_CONNECTED
    case STATUS_DEVICE_DISCONNECTED
    case STATUS_DEVICE_NOT_CONNECTED_YET
    case STATUS_DEVICE_ALREADY_CONNECTED
    case STATUS_CHARACTERISTIC_NOT_FOUND
    case STATUS_FAILED_TO_SUBSCRIBE
    case STATUS_DEVICE_TIME_OUT
    case STATUS_DEVICE_OUT_OF_RANGE
    case STATUS_FAILED_AUTH_RESPONSE
    case STATUS_DEVICE_NOT_FOUND
    case STATUS_CONNECTED_AUTHENTICATED
    case STATUS_COMPARTMENT_OPEN
    case STATUS_COMPARTMENT_CLOSE
    case ERROR_CODE_CONNECTION_POOL_FULL
    case ERROR_CODE_CONNECTION_IN_PROGRESS
    case ERROR_CODE_REQUEST_IN_PROGRESS
    case ERROR_INVALID_OBJECT
    case ERROR_PERMISSION_NOT_GRANTED
    case ERROR_BLUETOOTH_DISABLE
    case ERROR_BLUETOOTH_ENABLED
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum HardwareError : Swift.Int {
    case GENERIC_ERROR
    case INPUT_DATA_ERROR
    case GUID_ERROR
    case TIMESTAMP_ERROR
    case RSA_ENCRYPTION_FAILED
    case RSA_DECRYPTION_FAILED
    case RSA_SIGN_FAILED
    case RSA_VERIFY_FAILED
    case AES_ENCRYPTION_FAILED
    case AES_DECRYPTION_FAILED
    case SHA_FAILED
    case WRONG_SERVER_KEY
    case INVALID_SERVER_KEY
    case INVALID_SERVER_KEY1
    case HARDWARE_DEVICE_ERROR
    case FIRMWARE_ERROR
    case PARAMETER_ERROR
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Activity : Swift.String {
    case CURRENT_ACTIVITY_NAME
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public enum HardwareError : Swift.String {
  case GENERIC_ERROR
  case INPUT_DATA_ERROR
  case GUID_ERROR
  case TIMESTAMP_ERROR
  case RSA_ENCRYPTION_FAILED
  case RSA_DECRYPTION_FAILED
  case RSA_SIGN_FAILED
  case RSA_VERIFY_FAILED
  case ES_ENCRYPTION_FAILED
  case AES_DECRYPTION_FAILED
  case SHA_FAILED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
